#!/usr/bin/env python3
"""Start server with Supabase connection"""

import os
import sys
import asyncio
import asyncpg
import uvicorn
from datetime import datetime

# Set environment variables
os.environ["DATABASE_URL"] = "postgresql+asyncpg://postgres.zmdqmrugotfftxvrwdsd:MFCuJT0Jn04PtCTL@aws-1-us-east-2.pooler.supabase.com:6543/postgres"

async def test_connection():
    """Test Supabase connection"""
    print("üîÑ Testing Supabase connection...")
    
    # Direct connection URL for asyncpg
    database_url = "postgresql://postgres.zmdqmrugotfftxvrwdsd:MFCuJT0Jn04PtCTL@aws-1-us-east-2.pooler.supabase.com:6543/postgres"
    
    try:
        # Test connection
        conn = await asyncpg.connect(
            database_url,
            statement_cache_size=0,  # Critical for pgBouncer
            command_timeout=60
        )
        
        # Check if tables exist
        tables = await conn.fetch("""
            SELECT tablename FROM pg_tables 
            WHERE schemaname = 'public'
            ORDER BY tablename
        """)
        
        print("‚úÖ Connected to Supabase successfully!")
        print(f"üìä Found {len(tables)} tables:")
        for table in tables[:10]:  # Show first 10 tables
            print(f"   ‚Ä¢ {table['tablename']}")
        
        # Check for users table
        user_tables = [t for t in tables if 'user' in t['tablename'].lower()]
        if user_tables:
            print(f"\nüë§ User-related tables found: {user_tables}")
            
            # Check if there are any users
            user_count = await conn.fetchval("SELECT COUNT(*) FROM users")
            print(f"   Total users in database: {user_count}")
            
            if user_count == 0:
                print("\n‚ö†Ô∏è  No users found. Creating demo users...")
                await create_demo_users(conn)
        else:
            print("\n‚ö†Ô∏è  No user tables found. Creating schema...")
            await create_schema(conn)
            await create_demo_users(conn)
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Connection failed: {e}")
        return False

async def create_schema(conn):
    """Create necessary tables"""
    print("üìã Creating database schema...")
    
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            email VARCHAR(255) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            full_name VARCHAR(255),
            is_active BOOLEAN DEFAULT true,
            is_verified BOOLEAN DEFAULT false,
            totp_secret VARCHAR(255),
            totp_enabled BOOLEAN DEFAULT false,
            failed_login_attempts INTEGER DEFAULT 0,
            locked_until TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    print("‚úÖ Schema created successfully!")

async def create_demo_users(conn):
    """Create demo users in Supabase"""
    import bcrypt
    
    users = [
        ("test@test.com", "Test@123", "Test User"),
        ("admin@trading.com", "Admin@123", "Admin User"),
        ("trader@demo.com", "Trader@123", "Demo Trader")
    ]
    
    for email, password, name in users:
        # Hash password
        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        
        try:
            await conn.execute("""
                INSERT INTO users (email, password_hash, full_name, is_active, is_verified)
                VALUES ($1, $2, $3, true, true)
                ON CONFLICT (email) 
                DO UPDATE SET 
                    password_hash = $2,
                    full_name = $3,
                    failed_login_attempts = 0,
                    locked_until = NULL
            """, email, password_hash, name)
            
            print(f"‚úÖ User created/updated: {email}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Error with {email}: {e}")

def start_server():
    """Start the FastAPI server"""
    print("\nüöÄ Starting server with Supabase connection...")
    print("="*60)
    print("üìç Server URL: http://localhost:3001")
    print("üåê Frontend URL: http://localhost:3000")
    print("="*60)
    
    # Import and run the main app
    from main import app
    uvicorn.run(app, host="0.0.0.0", port=3001, reload=True)

async def main():
    """Main function"""
    # Test connection first
    if await test_connection():
        print("\n" + "="*60)
        print("üéâ Supabase connection successful!")
        print("="*60)
        print("\nüìß Available accounts:")
        print("  ‚Ä¢ test@test.com (Password: Test@123)")
        print("  ‚Ä¢ admin@trading.com (Password: Admin@123)")
        print("  ‚Ä¢ trader@demo.com (Password: Trader@123)")
        print("\n" + "="*60 + "\n")
        
        # Start the server
        start_server()
    else:
        print("\n‚ùå Failed to connect to Supabase")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())