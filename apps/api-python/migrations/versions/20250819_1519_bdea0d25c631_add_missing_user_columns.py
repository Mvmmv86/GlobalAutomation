"""Add missing user columns

Revision ID: bdea0d25c631
Revises: 001
Create Date: 2025-08-19 15:19:56.738921

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "bdea0d25c631"
down_revision: Union[str, None] = "001"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade to this revision"""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "api_keys",
        sa.Column(
            "usage_count",
            sa.Integer(),
            server_default="0",
            nullable=False,
            comment="Total usage counter",
        ),
    )
    op.alter_column(
        "api_keys",
        "name",
        existing_type=sa.VARCHAR(length=255),
        comment="API key friendly name",
        existing_nullable=False,
    )
    op.alter_column(
        "api_keys",
        "key_hash",
        existing_type=sa.VARCHAR(length=255),
        comment="Hashed API key",
        existing_nullable=False,
    )
    op.alter_column(
        "api_keys",
        "is_active",
        existing_type=sa.BOOLEAN(),
        comment="API key active status",
        existing_nullable=False,
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "api_keys",
        "rate_limit_per_minute",
        existing_type=sa.INTEGER(),
        server_default=None,
        nullable=True,
        comment="Custom rate limit per minute",
    )
    op.alter_column(
        "api_keys",
        "last_used_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last usage timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "api_keys",
        "expires_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="API key expiration timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "api_keys",
        "user_id",
        existing_type=sa.UUID(),
        comment="User owner ID",
        existing_nullable=False,
    )
    op.alter_column(
        "api_keys",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "api_keys",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "api_keys",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint("api_keys_prefix_key", "api_keys", type_="unique")
    op.drop_index("ix_api_keys_is_active", table_name="api_keys")
    op.drop_index("ix_api_keys_prefix", table_name="api_keys")
    op.drop_index("ix_api_keys_key_hash", table_name="api_keys")
    op.create_index(op.f("ix_api_keys_key_hash"), "api_keys", ["key_hash"], unique=True)
    op.drop_column("api_keys", "permissions")
    op.drop_column("api_keys", "rate_limit_per_hour")
    op.drop_column("api_keys", "prefix")
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "exchange_type",
            sa.Enum("BINANCE", "BYBIT", name="exchangetype"),
            nullable=False,
            comment="Exchange platform type",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "environment",
            sa.Enum("TESTNET", "MAINNET", name="exchangeenvironment"),
            nullable=False,
            comment="Trading environment (testnet/mainnet)",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "api_key_encrypted",
            sa.Text(),
            nullable=False,
            comment="Encrypted exchange API key",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "api_secret_encrypted",
            sa.Text(),
            nullable=False,
            comment="Encrypted exchange API secret",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "passphrase_encrypted",
            sa.Text(),
            nullable=True,
            comment="Encrypted passphrase (for exchanges that require it)",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "is_default",
            sa.Boolean(),
            nullable=False,
            comment="Default account for this exchange",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "max_position_size",
            sa.String(length=50),
            nullable=True,
            comment="Maximum position size (decimal string)",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "max_daily_volume",
            sa.String(length=50),
            nullable=True,
            comment="Maximum daily trading volume (decimal string)",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "allowed_symbols",
            sa.Text(),
            nullable=True,
            comment="JSON array of allowed trading symbols",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "risk_level",
            sa.String(length=20),
            nullable=False,
            comment="Risk level: low, medium, high",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "last_health_check",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Last successful health check",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "health_status",
            sa.String(length=20),
            nullable=False,
            comment="Health status: healthy, warning, error, unknown",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "last_error", sa.Text(), nullable=True, comment="Last API error message"
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "total_orders",
            sa.Integer(),
            nullable=False,
            comment="Total orders placed through this account",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "successful_orders",
            sa.Integer(),
            nullable=False,
            comment="Successful orders count",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "failed_orders", sa.Integer(), nullable=False, comment="Failed orders count"
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "last_trade_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Last successful trade timestamp",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "rate_limit_window",
            sa.Integer(),
            nullable=False,
            comment="Rate limit window in seconds",
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "rate_limit_requests",
            sa.Integer(),
            nullable=False,
            comment="Max requests per window",
        ),
    )
    op.alter_column(
        "exchange_accounts",
        "name",
        existing_type=sa.VARCHAR(length=255),
        comment="User-friendly account name",
        existing_nullable=False,
    )
    op.alter_column(
        "exchange_accounts",
        "is_active",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        comment="Account active status",
        existing_nullable=False,
    )
    op.alter_column(
        "exchange_accounts",
        "user_id",
        existing_type=sa.UUID(),
        comment="User owner ID",
        existing_nullable=False,
    )
    op.alter_column(
        "exchange_accounts",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "exchange_accounts",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "exchange_accounts",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("ix_exchange_accounts_exchange", table_name="exchange_accounts")
    op.drop_index("ix_exchange_accounts_is_active", table_name="exchange_accounts")
    op.drop_index("ix_exchange_accounts_testnet", table_name="exchange_accounts")
    op.drop_column("exchange_accounts", "secret_key")
    op.drop_column("exchange_accounts", "passphrase")
    op.drop_column("exchange_accounts", "api_key")
    op.drop_column("exchange_accounts", "exchange")
    op.drop_column("exchange_accounts", "testnet")
    op.alter_column(
        "orders",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="Exchange-provided order ID",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "client_order_id",
        existing_type=sa.VARCHAR(length=255),
        comment="Client-generated unique order ID",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "symbol",
        existing_type=sa.VARCHAR(length=50),
        comment="Trading symbol (e.g., BTCUSDT)",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "side",
        existing_type=postgresql.ENUM("buy", "sell", name="orderside"),
        comment="Order side (buy/sell)",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "type",
        existing_type=postgresql.ENUM(
            "market",
            "limit",
            "stop_loss",
            "take_profit",
            "stop_limit",
            name="ordertype",
        ),
        comment="Order type",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "status",
        existing_type=postgresql.ENUM(
            "pending",
            "submitted",
            "open",
            "partially_filled",
            "filled",
            "canceled",
            "rejected",
            "expired",
            "failed",
            name="orderstatus",
        ),
        server_default=None,
        comment="Current order status",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "quantity",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Order quantity",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Order price (null for market orders)",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "stop_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Stop price (for stop orders)",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "filled_quantity",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=None,
        comment="Quantity filled so far",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "average_fill_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Average fill price",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "fees_paid",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=None,
        comment="Total fees paid",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "fee_currency",
        existing_type=sa.VARCHAR(length=10),
        comment="Currency in which fees were paid",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "time_in_force",
        existing_type=postgresql.ENUM("gtc", "ioc", "fok", "gtd", name="timeinforce"),
        server_default=None,
        comment="Time in force",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "good_till_date",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Good till date (for GTD orders)",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "submitted_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="When order was submitted to exchange",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "first_fill_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="First fill timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "last_fill_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last fill timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "completed_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Order completion timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "source",
        existing_type=sa.VARCHAR(length=50),
        server_default=None,
        comment="Order source (webhook, api, manual, etc.)",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "webhook_delivery_id",
        existing_type=sa.UUID(),
        comment="Source webhook delivery ID",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "original_payload",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Original webhook/API payload",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "error_message",
        existing_type=sa.TEXT(),
        comment="Error message if order failed",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "error_code",
        existing_type=sa.VARCHAR(length=50),
        comment="Exchange-specific error code",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "retry_count",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Number of submission retry attempts",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "exchange_response",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Raw exchange API response",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "reduce_only",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        comment="Reduce-only order flag",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "post_only",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        comment="Post-only order flag",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "exchange_account_id",
        existing_type=sa.UUID(),
        comment="Exchange account used for this order",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "orders",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint("orders_client_order_id_key", "orders", type_="unique")
    op.alter_column(
        "positions",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="Exchange-provided position ID",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "symbol",
        existing_type=sa.VARCHAR(length=50),
        comment="Trading symbol (e.g., BTCUSDT)",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "side",
        existing_type=postgresql.ENUM("long", "short", name="positionside"),
        comment="Position side (long/short)",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "status",
        existing_type=postgresql.ENUM(
            "open", "closed", "closing", "liquidated", name="positionstatus"
        ),
        server_default=None,
        comment="Current position status",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "size",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Position size (absolute value)",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "entry_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Average entry price",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "mark_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Current mark price",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "unrealized_pnl",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=None,
        comment="Current unrealized PnL",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "realized_pnl",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=None,
        comment="Realized PnL from partial closes",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "initial_margin",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Initial margin required",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "maintenance_margin",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Maintenance margin required",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "leverage",
        existing_type=sa.NUMERIC(precision=5, scale=2),
        comment="Position leverage",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "liquidation_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Estimated liquidation price",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "bankruptcy_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment="Bankruptcy price",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "opened_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=None,
        comment="Position opening timestamp",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "closed_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Position closing timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "last_update_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=None,
        comment="Last position update timestamp",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "total_fees",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=None,
        comment="Total fees paid for this position",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "funding_fees",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=None,
        comment="Total funding fees paid/received",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "exchange_data",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Raw exchange position data",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "exchange_account_id",
        existing_type=sa.UUID(),
        comment="Exchange account holding this position",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "positions",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.add_column(
        "users",
        sa.Column(
            "failed_login_attempts",
            sa.Integer(),
            server_default="0",
            nullable=False,
            comment="Failed login attempts counter",
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "locked_until",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Account lock expiration timestamp",
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "reset_token",
            sa.String(length=255),
            nullable=True,
            comment="Password reset token",
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "reset_token_expires",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Password reset token expiration",
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "verification_token",
            sa.String(length=255),
            nullable=True,
            comment="Email verification token",
        ),
    )
    op.alter_column(
        "users",
        "email",
        existing_type=sa.VARCHAR(length=255),
        comment="User email address",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "name",
        existing_type=sa.VARCHAR(length=255),
        comment="User full name",
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "password_hash",
        existing_type=sa.VARCHAR(length=255),
        comment="Bcrypt hashed password",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "is_active",
        existing_type=sa.BOOLEAN(),
        comment="User account active status",
        existing_nullable=False,
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "users",
        "is_verified",
        existing_type=sa.BOOLEAN(),
        comment="Email verification status",
        existing_nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "users",
        "totp_secret",
        existing_type=sa.VARCHAR(length=32),
        comment="TOTP secret key (encrypted)",
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "totp_enabled",
        existing_type=sa.BOOLEAN(),
        comment="Two-factor authentication enabled",
        existing_nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "users",
        "last_login_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last successful login timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("ix_users_is_active", table_name="users")
    op.drop_constraint("users_email_key", "users", type_="unique")
    op.drop_index("ix_users_email", table_name="users")
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.alter_column(
        "webhook_deliveries",
        "status",
        existing_type=postgresql.ENUM(
            "pending",
            "processing",
            "success",
            "failed",
            "retrying",
            name="webhookdeliverystatus",
        ),
        server_default=None,
        comment="Delivery status",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "payload",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Original webhook payload",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "headers",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Request headers",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "source_ip",
        existing_type=sa.VARCHAR(length=45),
        comment="Source IP address",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "user_agent",
        existing_type=sa.TEXT(),
        comment="User agent string",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "processing_started_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Processing start timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "processing_completed_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Processing completion timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "processing_duration_ms",
        existing_type=sa.INTEGER(),
        comment="Processing duration in milliseconds",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "hmac_valid",
        existing_type=sa.BOOLEAN(),
        comment="HMAC signature validation result",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "ip_allowed",
        existing_type=sa.BOOLEAN(),
        comment="IP address validation result",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "headers_valid",
        existing_type=sa.BOOLEAN(),
        comment="Required headers validation result",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "payload_valid",
        existing_type=sa.BOOLEAN(),
        comment="Payload schema validation result",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "error_message",
        existing_type=sa.TEXT(),
        comment="Error message if processing failed",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "error_details",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment="Detailed error information",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "retry_count",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Number of retry attempts",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "next_retry_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Next retry attempt timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "orders_created",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Number of orders created from this delivery",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "orders_executed",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Number of orders successfully executed",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "orders_failed",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Number of orders that failed",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "webhook_id",
        existing_type=sa.UUID(),
        comment="Parent webhook ID",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "webhook_deliveries",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "webhooks",
        "name",
        existing_type=sa.VARCHAR(length=255),
        comment="User-friendly webhook name",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "url_path",
        existing_type=sa.VARCHAR(length=255),
        comment="Unique URL path for this webhook",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "secret",
        existing_type=sa.VARCHAR(length=255),
        comment="Webhook secret for HMAC validation",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "status",
        existing_type=postgresql.ENUM(
            "active", "paused", "disabled", "error", name="webhookstatus"
        ),
        server_default=None,
        comment="Webhook status",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "is_public",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        comment="Allow unauthenticated access",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "rate_limit_per_minute",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Rate limit per minute",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "rate_limit_per_hour",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Rate limit per hour",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "max_retries",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Maximum retry attempts for failed deliveries",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "retry_delay_seconds",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Delay between retry attempts",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "allowed_ips",
        existing_type=sa.TEXT(),
        comment="JSON array of allowed IP addresses",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "required_headers",
        existing_type=sa.TEXT(),
        comment="JSON object of required headers",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "payload_validation_schema",
        existing_type=sa.TEXT(),
        comment="JSON schema for payload validation",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "total_deliveries",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Total webhook deliveries",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "successful_deliveries",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Successful deliveries count",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "failed_deliveries",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Failed deliveries count",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "last_delivery_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last delivery attempt timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "last_success_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last successful delivery timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "auto_pause_on_errors",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        comment="Auto-pause webhook after consecutive errors",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "error_threshold",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Error count threshold for auto-pause",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "consecutive_errors",
        existing_type=sa.INTEGER(),
        server_default=None,
        comment="Current consecutive error count",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "user_id",
        existing_type=sa.UUID(),
        comment="User owner ID",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "id",
        existing_type=sa.UUID(),
        server_default=None,
        comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "webhooks",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint("webhooks_url_path_key", "webhooks", type_="unique")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade from this revision"""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint("webhooks_url_path_key", "webhooks", ["url_path"])
    op.alter_column(
        "webhooks",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "webhooks",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "webhooks",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment=None,
        existing_comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "user_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User owner ID",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "consecutive_errors",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Current consecutive error count",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "error_threshold",
        existing_type=sa.INTEGER(),
        server_default=sa.text("10"),
        comment=None,
        existing_comment="Error count threshold for auto-pause",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "auto_pause_on_errors",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("true"),
        comment=None,
        existing_comment="Auto-pause webhook after consecutive errors",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "last_success_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last successful delivery timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "last_delivery_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last delivery attempt timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "failed_deliveries",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Failed deliveries count",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "successful_deliveries",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Successful deliveries count",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "total_deliveries",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Total webhook deliveries",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "payload_validation_schema",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="JSON schema for payload validation",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "required_headers",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="JSON object of required headers",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "allowed_ips",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="JSON array of allowed IP addresses",
        existing_nullable=True,
    )
    op.alter_column(
        "webhooks",
        "retry_delay_seconds",
        existing_type=sa.INTEGER(),
        server_default=sa.text("60"),
        comment=None,
        existing_comment="Delay between retry attempts",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "max_retries",
        existing_type=sa.INTEGER(),
        server_default=sa.text("3"),
        comment=None,
        existing_comment="Maximum retry attempts for failed deliveries",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "rate_limit_per_hour",
        existing_type=sa.INTEGER(),
        server_default=sa.text("1000"),
        comment=None,
        existing_comment="Rate limit per hour",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "rate_limit_per_minute",
        existing_type=sa.INTEGER(),
        server_default=sa.text("60"),
        comment=None,
        existing_comment="Rate limit per minute",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "is_public",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        comment=None,
        existing_comment="Allow unauthenticated access",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "status",
        existing_type=postgresql.ENUM(
            "active", "paused", "disabled", "error", name="webhookstatus"
        ),
        server_default=sa.text("'active'::webhookstatus"),
        comment=None,
        existing_comment="Webhook status",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "secret",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Webhook secret for HMAC validation",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "url_path",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Unique URL path for this webhook",
        existing_nullable=False,
    )
    op.alter_column(
        "webhooks",
        "name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="User-friendly webhook name",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "webhook_deliveries",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "webhook_deliveries",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment=None,
        existing_comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "webhook_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="Parent webhook ID",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "orders_failed",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Number of orders that failed",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "orders_executed",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Number of orders successfully executed",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "orders_created",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Number of orders created from this delivery",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "next_retry_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Next retry attempt timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "retry_count",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Number of retry attempts",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "error_details",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment=None,
        existing_comment="Detailed error information",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "error_message",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Error message if processing failed",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "payload_valid",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Payload schema validation result",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "headers_valid",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Required headers validation result",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "ip_allowed",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="IP address validation result",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "hmac_valid",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="HMAC signature validation result",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "processing_duration_ms",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Processing duration in milliseconds",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "processing_completed_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Processing completion timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "processing_started_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Processing start timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "user_agent",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="User agent string",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "source_ip",
        existing_type=sa.VARCHAR(length=45),
        comment=None,
        existing_comment="Source IP address",
        existing_nullable=True,
    )
    op.alter_column(
        "webhook_deliveries",
        "headers",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment=None,
        existing_comment="Request headers",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "payload",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment=None,
        existing_comment="Original webhook payload",
        existing_nullable=False,
    )
    op.alter_column(
        "webhook_deliveries",
        "status",
        existing_type=postgresql.ENUM(
            "pending",
            "processing",
            "success",
            "failed",
            "retrying",
            name="webhookdeliverystatus",
        ),
        server_default=sa.text("'pending'::webhookdeliverystatus"),
        comment=None,
        existing_comment="Delivery status",
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.create_index("ix_users_email", "users", ["email"], unique=False)
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.create_index("ix_users_is_active", "users", ["is_active"], unique=False)
    op.alter_column(
        "users",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment=None,
        existing_comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "last_login_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last successful login timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "totp_enabled",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Two-factor authentication enabled",
        existing_nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "users",
        "totp_secret",
        existing_type=sa.VARCHAR(length=32),
        comment=None,
        existing_comment="TOTP secret key (encrypted)",
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "is_verified",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Email verification status",
        existing_nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "users",
        "is_active",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="User account active status",
        existing_nullable=False,
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "users",
        "password_hash",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Bcrypt hashed password",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="User full name",
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "email",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="User email address",
        existing_nullable=False,
    )
    op.drop_column("users", "verification_token")
    op.drop_column("users", "reset_token_expires")
    op.drop_column("users", "reset_token")
    op.drop_column("users", "locked_until")
    op.drop_column("users", "failed_login_attempts")
    op.alter_column(
        "positions",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "positions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "positions",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment=None,
        existing_comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "exchange_account_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="Exchange account holding this position",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "exchange_data",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment=None,
        existing_comment="Raw exchange position data",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "funding_fees",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Total funding fees paid/received",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "total_fees",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Total fees paid for this position",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "last_update_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("now()"),
        comment=None,
        existing_comment="Last position update timestamp",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "closed_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Position closing timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "opened_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("now()"),
        comment=None,
        existing_comment="Position opening timestamp",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "bankruptcy_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Bankruptcy price",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "liquidation_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Estimated liquidation price",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "leverage",
        existing_type=sa.NUMERIC(precision=5, scale=2),
        comment=None,
        existing_comment="Position leverage",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "maintenance_margin",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Maintenance margin required",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "initial_margin",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Initial margin required",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "realized_pnl",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Realized PnL from partial closes",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "unrealized_pnl",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Current unrealized PnL",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "mark_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Current mark price",
        existing_nullable=True,
    )
    op.alter_column(
        "positions",
        "entry_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Average entry price",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "size",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Position size (absolute value)",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "status",
        existing_type=postgresql.ENUM(
            "open", "closed", "closing", "liquidated", name="positionstatus"
        ),
        server_default=sa.text("'open'::positionstatus"),
        comment=None,
        existing_comment="Current position status",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "side",
        existing_type=postgresql.ENUM("long", "short", name="positionside"),
        comment=None,
        existing_comment="Position side (long/short)",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "symbol",
        existing_type=sa.VARCHAR(length=50),
        comment=None,
        existing_comment="Trading symbol (e.g., BTCUSDT)",
        existing_nullable=False,
    )
    op.alter_column(
        "positions",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Exchange-provided position ID",
        existing_nullable=True,
    )
    op.create_unique_constraint(
        "orders_client_order_id_key", "orders", ["client_order_id"]
    )
    op.alter_column(
        "orders",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "orders",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "orders",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment=None,
        existing_comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "exchange_account_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="Exchange account used for this order",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "post_only",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        comment=None,
        existing_comment="Post-only order flag",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "reduce_only",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        comment=None,
        existing_comment="Reduce-only order flag",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "exchange_response",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment=None,
        existing_comment="Raw exchange API response",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "retry_count",
        existing_type=sa.INTEGER(),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Number of submission retry attempts",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "error_code",
        existing_type=sa.VARCHAR(length=50),
        comment=None,
        existing_comment="Exchange-specific error code",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "error_message",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Error message if order failed",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "original_payload",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        comment=None,
        existing_comment="Original webhook/API payload",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "webhook_delivery_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="Source webhook delivery ID",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "source",
        existing_type=sa.VARCHAR(length=50),
        server_default=sa.text("'webhook'::character varying"),
        comment=None,
        existing_comment="Order source (webhook, api, manual, etc.)",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "completed_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Order completion timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "last_fill_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last fill timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "first_fill_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="First fill timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "submitted_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="When order was submitted to exchange",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "good_till_date",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Good till date (for GTD orders)",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "time_in_force",
        existing_type=postgresql.ENUM("gtc", "ioc", "fok", "gtd", name="timeinforce"),
        server_default=sa.text("'gtc'::timeinforce"),
        comment=None,
        existing_comment="Time in force",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "fee_currency",
        existing_type=sa.VARCHAR(length=10),
        comment=None,
        existing_comment="Currency in which fees were paid",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "fees_paid",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Total fees paid",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "average_fill_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Average fill price",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "filled_quantity",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        server_default=sa.text("0"),
        comment=None,
        existing_comment="Quantity filled so far",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "stop_price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Stop price (for stop orders)",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "price",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Order price (null for market orders)",
        existing_nullable=True,
    )
    op.alter_column(
        "orders",
        "quantity",
        existing_type=sa.NUMERIC(precision=20, scale=8),
        comment=None,
        existing_comment="Order quantity",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "status",
        existing_type=postgresql.ENUM(
            "pending",
            "submitted",
            "open",
            "partially_filled",
            "filled",
            "canceled",
            "rejected",
            "expired",
            "failed",
            name="orderstatus",
        ),
        server_default=sa.text("'pending'::orderstatus"),
        comment=None,
        existing_comment="Current order status",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "type",
        existing_type=postgresql.ENUM(
            "market",
            "limit",
            "stop_loss",
            "take_profit",
            "stop_limit",
            name="ordertype",
        ),
        comment=None,
        existing_comment="Order type",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "side",
        existing_type=postgresql.ENUM("buy", "sell", name="orderside"),
        comment=None,
        existing_comment="Order side (buy/sell)",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "symbol",
        existing_type=sa.VARCHAR(length=50),
        comment=None,
        existing_comment="Trading symbol (e.g., BTCUSDT)",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "client_order_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Client-generated unique order ID",
        existing_nullable=False,
    )
    op.alter_column(
        "orders",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Exchange-provided order ID",
        existing_nullable=True,
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "testnet",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "exchange",
            postgresql.ENUM("binance", "bybit", name="exchangetype"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "api_key", sa.VARCHAR(length=512), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "passphrase", sa.VARCHAR(length=512), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "exchange_accounts",
        sa.Column(
            "secret_key", sa.VARCHAR(length=512), autoincrement=False, nullable=False
        ),
    )
    op.create_index(
        "ix_exchange_accounts_testnet", "exchange_accounts", ["testnet"], unique=False
    )
    op.create_index(
        "ix_exchange_accounts_is_active",
        "exchange_accounts",
        ["is_active"],
        unique=False,
    )
    op.create_index(
        "ix_exchange_accounts_exchange", "exchange_accounts", ["exchange"], unique=False
    )
    op.alter_column(
        "exchange_accounts",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "exchange_accounts",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "exchange_accounts",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment=None,
        existing_comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "exchange_accounts",
        "user_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User owner ID",
        existing_nullable=False,
    )
    op.alter_column(
        "exchange_accounts",
        "is_active",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("true"),
        comment=None,
        existing_comment="Account active status",
        existing_nullable=False,
    )
    op.alter_column(
        "exchange_accounts",
        "name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="User-friendly account name",
        existing_nullable=False,
    )
    op.drop_column("exchange_accounts", "rate_limit_requests")
    op.drop_column("exchange_accounts", "rate_limit_window")
    op.drop_column("exchange_accounts", "last_trade_at")
    op.drop_column("exchange_accounts", "failed_orders")
    op.drop_column("exchange_accounts", "successful_orders")
    op.drop_column("exchange_accounts", "total_orders")
    op.drop_column("exchange_accounts", "last_error")
    op.drop_column("exchange_accounts", "health_status")
    op.drop_column("exchange_accounts", "last_health_check")
    op.drop_column("exchange_accounts", "risk_level")
    op.drop_column("exchange_accounts", "allowed_symbols")
    op.drop_column("exchange_accounts", "max_daily_volume")
    op.drop_column("exchange_accounts", "max_position_size")
    op.drop_column("exchange_accounts", "is_default")
    op.drop_column("exchange_accounts", "passphrase_encrypted")
    op.drop_column("exchange_accounts", "api_secret_encrypted")
    op.drop_column("exchange_accounts", "api_key_encrypted")
    op.drop_column("exchange_accounts", "environment")
    op.drop_column("exchange_accounts", "exchange_type")
    op.add_column(
        "api_keys",
        sa.Column("prefix", sa.VARCHAR(length=8), autoincrement=False, nullable=False),
    )
    op.add_column(
        "api_keys",
        sa.Column(
            "rate_limit_per_hour",
            sa.INTEGER(),
            server_default=sa.text("5000"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "api_keys",
        sa.Column(
            "permissions",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index(op.f("ix_api_keys_key_hash"), table_name="api_keys")
    op.create_index("ix_api_keys_key_hash", "api_keys", ["key_hash"], unique=False)
    op.create_index("ix_api_keys_prefix", "api_keys", ["prefix"], unique=False)
    op.create_index("ix_api_keys_is_active", "api_keys", ["is_active"], unique=False)
    op.create_unique_constraint("api_keys_prefix_key", "api_keys", ["prefix"])
    op.alter_column(
        "api_keys",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last update timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "api_keys",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Creation timestamp",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "api_keys",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        comment=None,
        existing_comment="Unique identifier",
        existing_nullable=False,
    )
    op.alter_column(
        "api_keys",
        "user_id",
        existing_type=sa.UUID(),
        comment=None,
        existing_comment="User owner ID",
        existing_nullable=False,
    )
    op.alter_column(
        "api_keys",
        "expires_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="API key expiration timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "api_keys",
        "last_used_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        comment=None,
        existing_comment="Last usage timestamp",
        existing_nullable=True,
    )
    op.alter_column(
        "api_keys",
        "rate_limit_per_minute",
        existing_type=sa.INTEGER(),
        server_default=sa.text("100"),
        nullable=False,
        comment=None,
        existing_comment="Custom rate limit per minute",
    )
    op.alter_column(
        "api_keys",
        "is_active",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="API key active status",
        existing_nullable=False,
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "api_keys",
        "key_hash",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Hashed API key",
        existing_nullable=False,
    )
    op.alter_column(
        "api_keys",
        "name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="API key friendly name",
        existing_nullable=False,
    )
    op.drop_column("api_keys", "usage_count")
    # ### end Alembic commands ###
