import React, { useState } from 'react'
import { Bot, Activity, Pause, Play, Settings, TrendingUp, DollarSign, BarChart3 } from 'lucide-react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../atoms/Card'
import { Button } from '../atoms/Button'
import { Badge } from '../atoms/Badge'
import { LoadingSpinner } from '../atoms/LoadingSpinner'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { botsService, Bot as BotType, BotSubscription, CreateSubscriptionData } from '@/services/botsService'
import { SubscribeBotModal } from '../molecules/SubscribeBotModal'
import { useExchangeAccounts } from '@/hooks/useExchangeAccounts'

const BotsPage: React.FC = () => {
  const queryClient = useQueryClient()
  const [selectedBot, setSelectedBot] = useState<BotType | null>(null)
  const [isSubscribeModalOpen, setIsSubscribeModalOpen] = useState(false)

  // Mock user ID - in real app, get from auth context
  // TODO: Get from auth context when authentication is implemented
  const userId = '550e8400-e29b-41d4-a716-446655440002'

  // Fetch available bots
  const { data: availableBots = [], isLoading: loadingBots } = useQuery({
    queryKey: ['bots-available'],
    queryFn: () => botsService.getAvailableBots()
  })

  // Fetch user subscriptions
  const { data: mySubscriptions = [], isLoading: loadingSubscriptions } = useQuery({
    queryKey: ['bot-subscriptions', userId],
    queryFn: () => botsService.getMySubscriptions(userId)
  })

  // Fetch exchange accounts
  const { data: exchangeAccounts = [] } = useExchangeAccounts()

  // Subscribe mutation
  const subscribeMutation = useMutation({
    mutationFn: (data: CreateSubscriptionData) => botsService.subscribeToBot(userId, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['bot-subscriptions'] })
      queryClient.invalidateQueries({ queryKey: ['bots-available'] })
      alert('‚úÖ Bot ativado com sucesso!')
    },
    onError: (error: any) => {
      alert(`‚ùå Erro ao ativar bot: ${error.message}`)
    }
  })

  // Pause/Resume mutation
  const toggleSubscriptionMutation = useMutation({
    mutationFn: ({ subscriptionId, action }: { subscriptionId: string, action: 'pause' | 'resume' }) => {
      if (action === 'pause') {
        return botsService.pauseSubscription(subscriptionId, userId)
      } else {
        return botsService.resumeSubscription(subscriptionId, userId)
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['bot-subscriptions'] })
    }
  })

  // Unsubscribe mutation
  const unsubscribeMutation = useMutation({
    mutationFn: (subscriptionId: string) => botsService.unsubscribeFromBot(subscriptionId, userId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['bot-subscriptions'] })
      queryClient.invalidateQueries({ queryKey: ['bots-available'] })
      alert('‚úÖ Assinatura cancelada com sucesso!')
    }
  })

  const handleSubscribe = (bot: BotType) => {
    setSelectedBot(bot)
    setIsSubscribeModalOpen(true)
  }

  const handleToggleSubscription = (subscription: BotSubscription) => {
    const action = subscription.status === 'active' ? 'pause' : 'resume'
    const message = action === 'pause'
      ? 'Deseja pausar este bot? Voc√™ deixar√° de receber sinais.'
      : 'Deseja reativar este bot? Voc√™ voltar√° a receber sinais.'

    if (confirm(message)) {
      toggleSubscriptionMutation.mutate({ subscriptionId: subscription.id, action })
    }
  }

  const handleUnsubscribe = (subscription: BotSubscription) => {
    if (confirm(`Deseja realmente cancelar a assinatura do bot "${subscription.bot_name}"?`)) {
      unsubscribeMutation.mutate(subscription.id)
    }
  }

  const getWinRate = (subscription: BotSubscription) => {
    const total = subscription.win_count + subscription.loss_count
    if (total === 0) return 0
    return ((subscription.win_count / total) * 100).toFixed(1)
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
          <Bot className="w-8 h-8" />
          Bots Gerenciados
        </h1>
        <p className="mt-2 text-gray-600 dark:text-gray-400">
          Bots automatizados de copy-trading gerenciados pela plataforma
        </p>
      </div>

      {/* My Active Subscriptions */}
      {mySubscriptions.length > 0 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold flex items-center gap-2">
            <Activity className="w-5 h-5" />
            Meus Bots Ativos
          </h2>

          <div className="grid grid-cols-1 gap-4">
            {mySubscriptions.map((subscription) => (
              <Card key={subscription.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="text-lg">{subscription.bot_name}</CardTitle>
                      <CardDescription className="mt-1">
                        Exchange: {subscription.exchange} - {subscription.account_name}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant={subscription.status === 'active' ? 'success' : 'warning'}>
                        {subscription.status === 'active' ? 'üü¢ Ativo' : '‚è∏Ô∏è Pausado'}
                      </Badge>
                      <Badge variant={subscription.market_type === 'futures' ? 'default' : 'secondary'}>
                        {subscription.market_type === 'futures' ? '‚ö° FUTURES' : 'üí∞ SPOT'}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-6 gap-4 text-sm mb-4">
                    <div>
                      <p className="text-muted-foreground">Sinais</p>
                      <p className="font-medium">{subscription.total_signals_received}</p>
                    </div>
                    <div>
                      <p className="text-muted-foreground">Executadas</p>
                      <p className="font-medium text-success">{subscription.total_orders_executed}</p>
                    </div>
                    <div>
                      <p className="text-muted-foreground">Falhas</p>
                      <p className="font-medium text-danger">{subscription.total_orders_failed}</p>
                    </div>
                    <div>
                      <p className="text-muted-foreground">Win Rate</p>
                      <p className="font-medium">{getWinRate(subscription)}%</p>
                    </div>
                    <div>
                      <p className="text-muted-foreground">P&L</p>
                      <p className={`font-medium ${subscription.total_pnl_usd >= 0 ? 'text-success' : 'text-danger'}`}>
                        {subscription.total_pnl_usd >= 0 ? '+' : ''}${subscription.total_pnl_usd.toFixed(2)}
                      </p>
                    </div>
                    <div>
                      <p className="text-muted-foreground">Posi√ß√µes</p>
                      <p className="font-medium">{subscription.current_positions}/{subscription.max_concurrent_positions}</p>
                    </div>
                  </div>

                  <div className="grid grid-cols-4 gap-4 text-xs text-muted-foreground border-t pt-3">
                    <div>
                      <p>Alavancagem</p>
                      <p className="font-medium text-foreground">
                        {subscription.custom_leverage || subscription.default_leverage}x
                      </p>
                    </div>
                    <div>
                      <p>Margem</p>
                      <p className="font-medium text-foreground">
                        ${subscription.custom_margin_usd || subscription.default_margin_usd}
                      </p>
                    </div>
                    <div>
                      <p>Stop Loss</p>
                      <p className="font-medium text-foreground">
                        {subscription.custom_stop_loss_pct || subscription.default_stop_loss_pct}%
                      </p>
                    </div>
                    <div>
                      <p>Take Profit</p>
                      <p className="font-medium text-foreground">
                        {subscription.custom_take_profit_pct || subscription.default_take_profit_pct}%
                      </p>
                    </div>
                  </div>

                  <div className="flex justify-end gap-2 mt-4 pt-3 border-t">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleToggleSubscription(subscription)}
                      disabled={toggleSubscriptionMutation.isPending}
                    >
                      {subscription.status === 'active' ? (
                        <><Pause className="w-4 h-4 mr-1" /> Pausar</>
                      ) : (
                        <><Play className="w-4 h-4 mr-1" /> Reativar</>
                      )}
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleUnsubscribe(subscription)}
                      disabled={unsubscribeMutation.isPending}
                    >
                      Cancelar Assinatura
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )}

      {/* Available Bots */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold flex items-center gap-2">
          <BarChart3 className="w-5 h-5" />
          Bots Dispon√≠veis
        </h2>

        {loadingBots ? (
          <div className="flex items-center justify-center py-12">
            <LoadingSpinner />
          </div>
        ) : availableBots.length === 0 ? (
          <Card>
            <CardContent className="text-center py-12">
              <p className="text-muted-foreground">Nenhum bot dispon√≠vel no momento</p>
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {availableBots.map((bot) => {
              const isSubscribed = mySubscriptions.some(sub => sub.bot_id === bot.id)

              return (
                <Card key={bot.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg">{bot.name}</CardTitle>
                      <Badge variant={bot.market_type === 'futures' ? 'default' : 'secondary'}>
                        {bot.market_type === 'futures' ? '‚ö° FUTURES' : 'üí∞ SPOT'}
                      </Badge>
                    </div>
                    <CardDescription className="mt-2">
                      {bot.description}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {/* Stats */}
                      <div className="grid grid-cols-2 gap-3 text-sm">
                        <div className="flex items-center gap-2">
                          <TrendingUp className="w-4 h-4 text-muted-foreground" />
                          <div>
                            <p className="text-muted-foreground text-xs">Assinantes</p>
                            <p className="font-medium">{bot.total_subscribers}</p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Activity className="w-4 h-4 text-muted-foreground" />
                          <div>
                            <p className="text-muted-foreground text-xs">Sinais Enviados</p>
                            <p className="font-medium">{bot.total_signals_sent}</p>
                          </div>
                        </div>
                      </div>

                      {/* Default Settings */}
                      <div className="border rounded-lg p-3 space-y-2 text-xs">
                        <p className="font-medium text-sm mb-2">Configura√ß√µes Padr√£o:</p>
                        <div className="grid grid-cols-2 gap-2">
                          <div>
                            <p className="text-muted-foreground">Alavancagem</p>
                            <p className="font-medium">{bot.default_leverage}x</p>
                          </div>
                          <div>
                            <p className="text-muted-foreground">Margem</p>
                            <p className="font-medium">${bot.default_margin_usd}</p>
                          </div>
                          <div>
                            <p className="text-muted-foreground">Stop Loss</p>
                            <p className="font-medium">{bot.default_stop_loss_pct}%</p>
                          </div>
                          <div>
                            <p className="text-muted-foreground">Take Profit</p>
                            <p className="font-medium">{bot.default_take_profit_pct}%</p>
                          </div>
                        </div>
                      </div>

                      {/* Action Button */}
                      <Button
                        className="w-full"
                        onClick={() => handleSubscribe(bot)}
                        disabled={isSubscribed || subscribeMutation.isPending}
                      >
                        {isSubscribed ? (
                          <>‚úÖ J√° Assinado</>
                        ) : (
                          <>
                            <Settings className="w-4 h-4 mr-2" />
                            Ativar Bot
                          </>
                        )}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        )}
      </div>

      {/* Subscribe Modal */}
      <SubscribeBotModal
        isOpen={isSubscribeModalOpen}
        onClose={() => {
          setIsSubscribeModalOpen(false)
          setSelectedBot(null)
        }}
        onSubmit={(data) => subscribeMutation.mutateAsync(data)}
        bot={selectedBot}
        exchangeAccounts={exchangeAccounts.map(acc => ({
          id: acc.id,
          name: acc.name,
          exchange: acc.exchange
        }))}
        isLoading={subscribeMutation.isPending}
      />
    </div>
  )
}

export default BotsPage
