#!/usr/bin/env python3
"""
Simula alertas do TradingView enviando requisi√ß√µes HTTP para os webhooks
Permite testar o sistema completo sem esperar alertas reais
"""

import requests
import json
import time
from datetime import datetime

# Configura√ß√£o
BASE_URL = "http://localhost:8000"  # Mudar para URL do ngrok se quiser testar via internet

# Webhooks dispon√≠veis
WEBHOOKS = {
    "BTC": {
        "path": "/webhooks/tv/btctpo",
        "name": "BTC_TPO_12min",
        "ticker": "BTCUSDT",
    },
    "ETH": {
        "path": "/webhooks/tv/ethtpo",
        "name": "ETH_TPO_12min",
        "ticker": "ETHUSDT",
    },
    "SOL": {
        "path": "/webhooks/tv/soltpo",
        "name": "SOL_TPO_12min",
        "ticker": "SOLUSDT",
    },
    "BNB": {
        "path": "/webhooks/tv/bnbtpo",
        "name": "BNB_TPO_5min",
        "ticker": "BNBUSDT",
    },
}

def print_header(title):
    """Print formatted header"""
    print("\n" + "=" * 80)
    print(f"  {title}")
    print("=" * 80)

def send_webhook_alert(webhook_key, action="buy", price=None):
    """
    Envia um alerta simulado para o webhook

    Args:
        webhook_key: Chave do webhook (BTC, ETH, SOL, BNB)
        action: A√ß√£o do trade (buy, sell, close)
        price: Pre√ßo (opcional, usa pre√ßo fict√≠cio se n√£o fornecido)
    """
    if webhook_key not in WEBHOOKS:
        print(f"‚ùå Webhook '{webhook_key}' n√£o encontrado!")
        return False

    webhook = WEBHOOKS[webhook_key]

    # Pre√ßos fict√≠cios se n√£o fornecido
    default_prices = {
        "BTCUSDT": 67500.0,
        "ETHUSDT": 3200.0,
        "SOLUSDT": 145.0,
        "BNBUSDT": 620.5,
    }

    if price is None:
        price = default_prices.get(webhook["ticker"], 1000.0)

    # Payload que simula o TradingView
    payload = {
        "ticker": webhook["ticker"],
        "action": action,
        "price": price,
        "timestamp": datetime.now().isoformat(),
        "source": "simulation_script"  # Identificar que √© um teste
    }

    url = f"{BASE_URL}{webhook['path']}"

    print(f"\nüì§ Enviando alerta para {webhook['name']}...")
    print(f"   URL: {url}")
    print(f"   Payload: {json.dumps(payload, indent=6)}")

    try:
        start_time = time.time()
        response = requests.post(
            url,
            json=payload,
            headers={
                "Content-Type": "application/json",
                "User-Agent": "TradingView-Webhook-Simulator/1.0"
            },
            timeout=30
        )
        elapsed_ms = int((time.time() - start_time) * 1000)

        print(f"\nüì• RESPOSTA:")
        print(f"   Status Code: {response.status_code}")
        print(f"   Tempo: {elapsed_ms}ms")

        try:
            response_data = response.json()
            print(f"   Resposta JSON:")
            print(f"   {json.dumps(response_data, indent=6)}")

            if response_data.get("success"):
                print(f"\n   ‚úÖ Alerta processado com SUCESSO!")
                if "orders_created" in response_data:
                    print(f"   üìä Ordens criadas: {response_data['orders_created']}")
                    print(f"   üöÄ Ordens executadas: {response_data.get('orders_executed', 0)}")
                return True
            else:
                print(f"\n   ‚ö†Ô∏è  Alerta recebido mas houve erro no processamento:")
                print(f"   ‚ùå Erro: {response_data.get('error', 'Desconhecido')}")
                return False

        except json.JSONDecodeError:
            print(f"   Resposta (n√£o √© JSON): {response.text}")
            return response.status_code == 200

    except requests.exceptions.ConnectionError:
        print(f"\n   ‚ùå ERRO: N√£o conseguiu conectar ao backend!")
        print(f"   ‚ö†Ô∏è  Certifique-se que o backend est√° rodando em {BASE_URL}")
        return False
    except requests.exceptions.Timeout:
        print(f"\n   ‚ùå ERRO: Timeout ap√≥s 30 segundos")
        return False
    except Exception as e:
        print(f"\n   ‚ùå ERRO: {e}")
        return False

def test_all_webhooks():
    """Testa todos os webhooks com alertas de compra"""
    print_header("üß™ TESTE COMPLETO - TODOS OS WEBHOOKS")

    results = {}

    for key, webhook in WEBHOOKS.items():
        success = send_webhook_alert(key, action="buy")
        results[webhook["name"]] = "‚úÖ SUCESSO" if success else "‚ùå FALHOU"
        time.sleep(2)  # Aguardar 2s entre cada teste

    print_header("üìä RESUMO DOS TESTES")
    for name, result in results.items():
        print(f"   {result} - {name}")

    total = len(results)
    passed = sum(1 for r in results.values() if "SUCESSO" in r)
    print(f"\n   Total: {passed}/{total} webhooks funcionando")

def interactive_mode():
    """Modo interativo para testar webhooks individualmente"""
    print_header("üéÆ MODO INTERATIVO - SIMULADOR DE ALERTAS")

    while True:
        print("\n" + "-" * 80)
        print("Escolha uma op√ß√£o:")
        print("  1. Testar BTC (buy)")
        print("  2. Testar ETH (buy)")
        print("  3. Testar SOL (buy)")
        print("  4. Testar BNB (buy)")
        print("  5. Testar TODOS os webhooks")
        print("  6. Teste customizado")
        print("  0. Sair")
        print("-" * 80)

        choice = input("\nüëâ Escolha: ").strip()

        if choice == "0":
            print("\nüëã Saindo...")
            break
        elif choice == "1":
            send_webhook_alert("BTC", "buy")
        elif choice == "2":
            send_webhook_alert("ETH", "buy")
        elif choice == "3":
            send_webhook_alert("SOL", "buy")
        elif choice == "4":
            send_webhook_alert("BNB", "buy")
        elif choice == "5":
            test_all_webhooks()
        elif choice == "6":
            print("\nüìù Teste Customizado:")
            webhook_key = input("  Webhook (BTC/ETH/SOL/BNB): ").strip().upper()
            action = input("  A√ß√£o (buy/sell/close): ").strip().lower()
            price_str = input("  Pre√ßo (Enter para usar default): ").strip()

            price = float(price_str) if price_str else None
            send_webhook_alert(webhook_key, action, price)
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    import sys

    print("=" * 80)
    print("üöÄ SIMULADOR DE ALERTAS DO TRADINGVIEW")
    print("=" * 80)
    print(f"\nBackend: {BASE_URL}")
    print("\nEste script simula alertas do TradingView enviando requisi√ß√µes HTTP")
    print("para os webhooks configurados, permitindo testar o sistema completo.")

    # Verificar se backend est√° acess√≠vel
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("\n‚úÖ Backend est√° acess√≠vel e respondendo!")
        else:
            print(f"\n‚ö†Ô∏è  Backend respondeu com status {response.status_code}")
    except:
        print(f"\n‚ùå ATEN√á√ÉO: Backend n√£o est√° acess√≠vel em {BASE_URL}")
        print("   Execute 'python3 main.py' antes de usar este script")
        sys.exit(1)

    # Menu
    print("\n" + "-" * 80)
    print("Modos de opera√ß√£o:")
    print("  1. Modo Interativo (escolher webhook individualmente)")
    print("  2. Teste R√°pido (testar todos os webhooks de uma vez)")
    print("-" * 80)

    mode = input("\nüëâ Escolha o modo (1 ou 2): ").strip()

    if mode == "1":
        interactive_mode()
    elif mode == "2":
        test_all_webhooks()
    else:
        print("‚ùå Modo inv√°lido! Use 1 ou 2")
