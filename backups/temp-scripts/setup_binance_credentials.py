#!/usr/bin/env python3
"""
Setup permanente das credenciais da Binance
Este script configura tudo de forma definitiva para n√£o precisar altera√ß√µes futuras
"""

import asyncio
import os
import base64
import secrets
from pathlib import Path
from dotenv import load_dotenv, set_key
from infrastructure.database.connection_transaction_mode import transaction_db
from infrastructure.security.encryption_service import EncryptionService
from infrastructure.exchanges.binance_connector import BinanceConnector
from binance import AsyncClient

# Carrega .env existente
load_dotenv()

async def setup_binance_credentials():
    """Configura credenciais da Binance de forma permanente"""
    
    print("\nüîß CONFIGURA√á√ÉO PERMANENTE DAS CREDENCIAIS BINANCE")
    print("=" * 60)
    
    # 1. Verificar/Criar ENCRYPTION_MASTER_KEY
    print("\n1Ô∏è‚É£ Configurando chave de criptografia...")
    env_file = Path(".env")
    
    encryption_key = os.getenv("ENCRYPTION_MASTER_KEY")
    if not encryption_key:
        # Gerar chave permanente
        encryption_key = base64.urlsafe_b64encode(secrets.token_bytes(32)).decode()
        set_key(env_file, "ENCRYPTION_MASTER_KEY", encryption_key)
        print(f"   ‚úÖ Chave de criptografia gerada e salva no .env")
    else:
        print(f"   ‚úÖ Chave de criptografia j√° existe")
    
    # 2. Verificar credenciais da Binance
    print("\n2Ô∏è‚É£ Verificando credenciais da Binance...")
    api_key = os.getenv("BINANCE_API_KEY")
    api_secret = os.getenv("BINANCE_SECRET_KEY") or os.getenv("BINANCE_API_SECRET")
    
    if not api_key or not api_secret:
        print("   ‚ùå Credenciais da Binance n√£o encontradas no .env")
        print("\n   Por favor, adicione ao arquivo .env:")
        print("   BINANCE_API_KEY=sua_api_key_aqui")
        print("   BINANCE_API_SECRET=sua_secret_key_aqui")
        return False
    
    # Padronizar nome da vari√°vel
    if not os.getenv("BINANCE_API_SECRET") and api_secret:
        set_key(env_file, "BINANCE_API_SECRET", api_secret)
        print("   ‚úÖ Vari√°vel BINANCE_API_SECRET configurada")
    
    print(f"   ‚úÖ API Key: {api_key[:8]}...{api_key[-4:]}")
    
    # 3. Testar conex√£o com a Binance
    print("\n3Ô∏è‚É£ Testando conex√£o com a Binance...")
    client = None
    try:
        client = await AsyncClient.create(api_key=api_key, api_secret=api_secret)
        account = await client.get_account()
        
        print(f"   ‚úÖ Conex√£o OK!")
        print(f"   Tipo de conta: {account.get('accountType', 'SPOT')}")
        print(f"   Pode negociar: {'Sim' if account.get('canTrade') else 'N√£o'}")
        
        # Mostrar saldos principais
        balances = account.get('balances', [])
        active_balances = [
            b for b in balances 
            if float(b['free']) > 0.00001 or float(b['locked']) > 0.00001
        ]
        
        if active_balances:
            print(f"   üí∞ Saldos encontrados: {len(active_balances)} moedas")
            
    except Exception as e:
        print(f"   ‚ùå Erro na conex√£o: {e}")
        print("\n   Verifique:")
        print("   1. Se as credenciais est√£o corretas")
        print("   2. Se a API Key tem permiss√µes de leitura")
        print("   3. Se seu IP est√° na whitelist da Binance")
        return False
    finally:
        if client:
            await client.close_connection()
    
    # 4. Atualizar credenciais no banco de dados
    print("\n4Ô∏è‚É£ Atualizando credenciais no banco de dados...")
    
    try:
        await transaction_db.connect()
        
        # Criar servi√ßo de criptografia com a chave configurada
        encryption_service = EncryptionService(master_key=encryption_key)
        
        # Criptografar credenciais
        encrypted_api_key = encryption_service.encrypt_string(api_key)
        encrypted_secret_key = encryption_service.encrypt_string(api_secret)
        
        # Buscar contas Binance existentes
        accounts = await transaction_db.fetch("""
            SELECT id, name FROM exchange_accounts 
            WHERE exchange = 'binance'
        """)
        
        if accounts:
            # Atualizar todas as contas Binance com as novas credenciais criptografadas
            for account in accounts:
                await transaction_db.execute("""
                    UPDATE exchange_accounts 
                    SET api_key = $1, secret_key = $2, updated_at = NOW()
                    WHERE id = $3
                """, encrypted_api_key, encrypted_secret_key, account['id'])
                
                print(f"   ‚úÖ Conta '{account['name']}' atualizada")
        else:
            # Criar nova conta se n√£o existir
            await transaction_db.execute("""
                INSERT INTO exchange_accounts (
                    name, exchange, api_key, secret_key, 
                    testnet, is_active, created_at, updated_at
                ) VALUES (
                    'Binance Principal', 'binance', $1, $2, 
                    false, true, NOW(), NOW()
                )
            """, encrypted_api_key, encrypted_secret_key)
            
            print("   ‚úÖ Nova conta 'Binance Principal' criada")
        
        await transaction_db.disconnect()
        
    except Exception as e:
        print(f"   ‚ùå Erro ao atualizar banco: {e}")
        await transaction_db.disconnect()
        return False
    
    # 5. Testar integra√ß√£o completa
    print("\n5Ô∏è‚É£ Testando integra√ß√£o completa...")
    
    try:
        await transaction_db.connect()
        
        # Buscar conta e testar descriptografia
        account = await transaction_db.fetchrow("""
            SELECT id, name, api_key, secret_key 
            FROM exchange_accounts 
            WHERE exchange = 'binance' AND is_active = true
            LIMIT 1
        """)
        
        if account:
            # Descriptografar
            decrypted_api = encryption_service.decrypt_string(account['api_key'])
            decrypted_secret = encryption_service.decrypt_string(account['secret_key'])
            
            # Verificar se s√£o iguais √†s originais
            if decrypted_api == api_key and decrypted_secret == api_secret:
                print(f"   ‚úÖ Criptografia/Descriptografia funcionando!")
                
                # Testar connector
                connector = BinanceConnector(
                    api_key=decrypted_api,
                    api_secret=decrypted_secret,
                    testnet=False
                )
                
                result = await connector.test_connection()
                if result['success']:
                    print(f"   ‚úÖ BinanceConnector funcionando!")
                else:
                    print(f"   ‚ö†Ô∏è BinanceConnector: {result.get('error')}")
            else:
                print(f"   ‚ùå Erro na descriptografia")
        
        await transaction_db.disconnect()
        
    except Exception as e:
        print(f"   ‚ùå Erro no teste: {e}")
        await transaction_db.disconnect()
        return False
    
    print("\n" + "=" * 60)
    print("‚úÖ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("\nüìå Resumo:")
    print(f"   ‚Ä¢ Chave de criptografia: Configurada no .env")
    print(f"   ‚Ä¢ Credenciais Binance: Configuradas e testadas")
    print(f"   ‚Ä¢ Banco de dados: Credenciais criptografadas e salvas")
    print(f"   ‚Ä¢ Integra√ß√£o: Testada e funcionando")
    print("\nüöÄ Sua plataforma est√° pronta para carregar dados da Binance!")
    
    return True

if __name__ == "__main__":
    success = asyncio.run(setup_binance_credentials())
    
    if not success:
        print("\n‚ö†Ô∏è Configura√ß√£o incompleta. Verifique os erros acima.")
        exit(1)